# 생활코딩 수업 따라해보기
https://www.tensorflow.org/js/models?hl=ko

https://github.com/tensorflow/tfjs-models/tree/master/mobilenet
MobileNet 소스 복사

node js를 이용하여 MobileNet 소스 실행해보기


-----------------------------------------------------------------------------------------------
[node js]
var express = require('express');
const ejs = require('ejs');
const http = require('http');
const static = require('serve-static');
var fs = require('fs');
const router = express.Router();
var app = express();
var path = require('path');
const cors = require('cors');
const expressErrorHandler = require('express-error-handler');
const errorHandler = expressErrorHandler({
  static:{
    '404': __dirname + '/public/404.html'
  }
});
app.set('port',process.env.PORT || 3000);
app.use('/public',static(path.join(__dirname + 'public')));
app.use('/upload',static(path.join(__dirname + 'upload')));
console.log(__dirname);
app.set('views',path.join(__dirname , 'views'));
app.set('view engine', 'ejs');
app.use(cors());

app.use('/',router);
app.use(expressErrorHandler.httpError(404));
app.use(errorHandler);

var server = http.createServer(function(request,response){
  var url = request.url;
  if(request.url == '/'){
    url = '/public/home.html';
  }
  if(request.url == '/favicon.ico'){
    return response.writeHead(404);
  }
  response.writeHead(200);
  response.end(fs.readFileSync(__dirname + url));
},app);
server.listen(app.get('port'));

-------------------------------------------------------------------------------------

<!DOCTYPE html>
<html>
    <head>
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1"> </script>
        <!-- Load the MobileNet model. -->
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0"> </script>
        
    </head>
    <body>
        <script>
            var ondo = [20,21,22,23];
            var sale = [40,42,44,46];
            var input = tf.tensor(ondo);
            var output = tf.tensor(sale);

            var X = tf.input({ shape: [1]});
            var Y = tf.layers.dense({ units: 1}).apply(X);
            var model = tf.model({ inputs: X, outputs: Y});
            var compileParam = { optimizer: tf.train.adam(), loss: tf.losses.meanSquaredError}
            model.compile(compileParam);

            //var fitParam = {epochs: 10000}
            var fitParam = {
                epochs: 100,
                callbacks:{
                    onEpochEnd:
                    function(epoch, logs){
                        console.log('epoch',epoch, logs);
                    }
                }
            }
            model.fit(input, output, fitParam).then(function(result){
                var predict1 = model.predict(input);
                predict1.print();
            });
</script>

    </body>
</html>
------------------------------------------------------------------
<!DOCTYPE html>
<html>
    <head>
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1"> </script>
        <!-- Load the MobileNet model. -->
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0"> </script>
        
    </head>
    <body>
        <script>
            var ondo = [20,21,22,23];
            var sale = [40,42,44,46];
            var input = tf.tensor(ondo);
            var output = tf.tensor(sale);

            var X = tf.input({ shape: [1]});
            var Y = tf.layers.dense({ units: 1}).apply(X);
            var model = tf.model({ inputs: X, outputs: Y});
            var compileParam = { optimizer: tf.train.adam(), loss: tf.losses.meanSquaredError}
            model.compile(compileParam);

            //var fitParam = {epochs: 10000}
            var fitParam = {
                epochs: 6000,
                callbacks:{
                    onEpochEnd:
                    function(epoch, logs){
                        console.log('epoch',epoch, logs, 'RMSE=>', Math.sqrt(logs.loss));
                    }
                }
            }
            model.fit(input, output, fitParam).then(function(result){
                var predict1 = model.predict(input);
                predict1.print();
            });
</script>

    </body>
</html>
-------------------------------------------------------------------------------

<!DOCTYPE html>
<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.1"> </script>
    <!-- Load the MobileNet model. -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0"> </script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis"></script>
</head>
<body>
    <script>
        
        var val = [
        //     ['0.00632','18','2.31','0','0.538','6.575','65.2','4.09','1','296','15.3','396.9','4.98'],
        //     ['0.02731','0','7.07','0','0.469','6.421','78.9','4.9671','2','242','17.8','396.9','9.14']
            [0.00632,18,2.31,0,0.538,6.575,65.2,4.09,1,296,15.3,396.9,4.98],
            [0.02731,0,7.07,0,0.469,6.421,78.9,4.9671,2,242,17.8,396.9,9.14]
        
        ];
        var res = [
        //     ['24'], 
        //     ['21.6']
            [24], 
            [21.6]
        
        ];
     
        // 1. 과거의 데이터를 준비합니다. 
        var from = tf.tensor(val);
        var to = tf.tensor(res);
 
        // 2. 모델의 모양을 만듭니다. 
        var X = tf.input({ shape: [13] });
        var H1 = tf.layers.dense({ units: 13, activation:'relu' }).apply(X);
        var H2 = tf.layers.dense({ units: 13, activation:'relu' }).apply(H1);
        var Y = tf.layers.dense({ units: 1 }).apply(H2);
        var model = tf.model({ inputs: X, outputs: Y });
        var compileParam = { optimizer: tf.train.adam(), loss: tf.losses.meanSquaredError }
        model.compile(compileParam);
        tfvis.show.modelSummary({name:'요약', tab:'모델'}, model);
 
        // 3. 데이터로 모델을 학습시킵니다. 
        var fitParam = {epochs: 100}
        var _history = [];
        var fitParam = { 
          epochs: 100, 
          callbacks:{
            onEpochEnd:
              function(epoch, logs){
                console.log('epoch', epoch, logs, 'RMSE=>', Math.sqrt(logs.loss));
                _history.push(logs);
                tfvis.show.history({name:'loss', tab:'역사'}, _history, ['loss']);
              }
          }
        } // loss 추가 예제
        model.fit(from, to, fitParam).then(function (result) {
             
            // 4. 모델을 이용합니다. 
            // 4.1 기존의 데이터를 이용
            var pre = model.predict(from);
            pre.print();
 
        });  
</script>
</body>
</html>
