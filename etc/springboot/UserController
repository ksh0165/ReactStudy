package com.example.demo.controller;

import java.util.List;
import java.util.function.Supplier;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.common.RoleType;
import com.example.demo.dto.ResponseDto;
import com.example.demo.dto.User;
import com.example.demo.exception.UserException;
import com.example.demo.persistence.UserRepository;
import com.example.demo.service.UserService;

@Controller
public class UserController { 
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private UserService userService;
	
	@GetMapping("/auth/insertUser")
	public String insertUser() {
		return "user/insertUser";
	}
	
	@GetMapping("/user/get/{id}")
	public @ResponseBody User getUser(@PathVariable int id) {
		User findUser = userRepository.findById(id).orElseThrow(new Supplier<UserException>() {
			@Override
			public UserException get() {
				return new UserException(id + "번 회원이 없습니다.");
		}});
		return findUser;
	}
	
	@PutMapping("/user")
	public @ResponseBody String updateUser(@RequestBody User user) {
		User findUser = userRepository.findById(user.getId()).orElseThrow(()->{
			return new UserException(user.getId() + "번 회원이 없습니다. ");
		});
		
		findUser.setUsername(user.getUsername());
		findUser.setPassword(user.getPassword());
		findUser.setEmail(user.getEmail());
		userRepository.save(findUser);
		return "회원 수정 성공";
	}
	
	@DeleteMapping("/user/{id}")
	public @ResponseBody String deleteUser(@PathVariable int id) {
		userRepository.deleteById(id);
		return "회원 삭제 성공";
	}
	
	@GetMapping("/user/list")
	public @ResponseBody List<User> getUserList(){
		return userRepository.findAll();
	}
	
	@GetMapping("/user/page/{page}")
	public @ResponseBody Page<User> getUserListPaging(
			@PageableDefault(page = 0, size = 2, direction = Sort.Direction.DESC, sort= {"id","username"}) Pageable pageable){
		return userRepository.findAll(pageable);
	}
	
	@PostMapping("/auth/insertUser")
	public @ResponseBody ResponseDto<?> insertUser(@RequestBody User user) {
		userService.insertUser(user);
		return new ResponseDto<>(HttpStatus.OK.value(),user.getUsername()+"님 회원가입 성공!");
	}
}
