#책 실습

package Thread;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.Random;
public class Test5 {
	public static void main(String[] args) {
		Data data = new Data(10);
		new ReaderThread1(data).start();
		new ReaderThread1(data).start();
		new ReaderThread1(data).start();
		new ReaderThread1(data).start();
		new ReaderThread1(data).start();
		new ReaderThread1(data).start();
		new WriterThread1(data, "ABCDEFGHIJKLMNOPQRTSUVWXYZ").start();
		new WriterThread1(data, "abcdefghijklmnopqrstuvwxyz").start();
	}
}
class Data {
	private final char[] buffer;
	private final ReadWriteLock lock = new ReentrantReadWriteLock(true /*fair*/);
	private final Lock readLock = lock.readLock();
	private final Lock writeLock = lock.writeLock();
	
	public Data(int size) {
		this.buffer = new char[size];
		for(int i = 0; i < buffer.length; i++) {
			buffer[i] = '*';
		}
	}
	public char[] read() throws InterruptedException {
		readLock.lock();
		try {
			return doRead();
		}finally {
			readLock.unlock();
		}
	}
	public void write(char c) throws InterruptedException{
		writeLock.lock();
		try {
			doWrite(c);
		}finally {
			writeLock.unlock();
		}
	}
	private char[] doRead() {
		char[] newbuf = new char[buffer.length];
		for(int i = 0; i<buffer.length; i++) {
			newbuf[i] = buffer[i];
		}
		slowly();
		return newbuf;
	}
	private void doWrite(char c) {
		for(int i = 0; i < buffer.length; i++) {
			buffer[i] = c;
			slowly();
		}
	}
	private void slowly() {
		try {
			Thread.sleep(50);
		}catch(InterruptedException e) {}
	}
}

class WriterThread1 extends Thread{
	private static final Random random = new Random();
	private final Data data;
	private final String filter;
	private int index = 0;
	public WriterThread1(Data data, String filter) {
		this.data = data;
		this.filter = filter;
	}
	public void run() {
		try {
			while(true) {
				char c = nextchar();
				data.write(c);
				Thread.sleep(random.nextInt(3000));
			}
		}catch(InterruptedException e) {}
	}
	private char nextchar() {
		char c= filter.charAt(index);
		index++;
		if(index >= filter.length()) {
			index = 0;
		}
		return c;
	}
}

class ReaderThread1 extends Thread{
	private final Data data;
	public ReaderThread1(Data data) {
		this.data = data;
	}
	public void run() {
		try {
			while(true) {
				char[] readbuf = data.read();
				System.out.println(Thread.currentThread().getName()+" reads "+String.valueOf(readbuf));
			}
		}catch(InterruptedException e) {}
	}
}
