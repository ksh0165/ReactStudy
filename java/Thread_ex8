#책 실습

package Thread;
import java.util.Random;
public class Test7 {
	public static void main(String[] args) {
		Channel1 channel = new Channel1(5);
		channel.startWorkers();
		new ClientThread3("Alice", channel).start();
		new ClientThread3("Bobby", channel).start();
		new ClientThread3("Chris", channel).start();
	}
}
class ClientThread3 extends Thread{
	private final Channel1 channel;
	private static final Random random = new Random();
	public ClientThread3(String name, Channel1 channel) {
		super(name);
		this.channel = channel;
	}
	
	public void run() {
		try {
			for(int i = 0; true; i++) {
				Request1 request = new Request1(getName(),i);
				channel.putRequest(request);
				Thread.sleep(random.nextInt(1000));
			}
		}catch(InterruptedException e) {}
	}
}
class Request1 {
	private final String name;
	private final int number;
	private static final Random random = new Random();
	public Request1(String name, int number) {
		this.name = name;
		this.number = number;
	}
	public void execute() {
		System.out.println(Thread.currentThread().getName() + " execute "+this);
		try {
			Thread.sleep(random.nextInt(1000));
		}catch(InterruptedException e) {}
	}
	public String toString() {
		return "[ Request from " + name + " No." + number + " ]";
	}
}
class Channel1 {
	private static final int MAX_REQUEST = 100;
	private final Request1[] requestQueue;
	private int tail;
	private int head;
	private int count;
	private final WorkerThread[] threadPool;
	
	public Channel1(int threads) {
		this.requestQueue = new Request1[MAX_REQUEST];
		this.head = 0;
		this.tail = 0;
		this.count = 0;
		
		threadPool = new WorkerThread[threads];
		for(int i = 0; i < threadPool.length; i ++) {
			threadPool[i] = new WorkerThread("Worker-"+i, this);
		}
	}
	public void startWorkers() {
		for(int i = 0; i < threadPool.length; i++) {
			threadPool[i].start();
		}
	}
	public synchronized void putRequest(Request1 request) {
		while(count >= requestQueue.length) {
			try {
				wait();
			}catch(InterruptedException e) {}
		}
	
	requestQueue[tail] = request;
	tail = (tail + 1) % requestQueue.length;
	count++;
	notifyAll();
	}
	public synchronized Request1 takeRequest() {
		while(count <= 0) {
			try {
				wait();
			}catch(InterruptedException e) {}
		}
		Request1 request = requestQueue[head];
		head = ( head + 1) % requestQueue.length;
		count--;
		notifyAll();
		return request;
	}
}

class WorkerThread extends Thread{
	private final Channel1 channel;
	public WorkerThread(String name, Channel1 channel) {
		super(name);
		this.channel = channel;
	}
	public void run() {
		while(true) {
			Request1 request = channel.takeRequest();
			request.execute();
		}
	}
}
