package com.example.test;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.example.test.entity.Memo;
import com.example.test.repository.MemoRepository;

import java.util.Optional;
import java.util.stream.IntStream;
@SpringBootTest
public class MemoRepositoryTests {
	@Autowired
	MemoRepository memoRepository;
	@Test
	public void testClass() {
		System.out.println(memoRepository.getClass().getName());
	}
	
	/*
	@Test
	public void testInsertDummies() {
		IntStream.rangeClosed(1,100).forEach(i -> {
			Memo memo = Memo.builder().memoText(Integer.toString(i)).build();
			memoRepository.save(memo);
		});
	}
	
	@Test
	public void testSelect() {
		Long mno = 100L;
		Optional<Memo> result = memoRepository.findById(mno);
		System.out.println("==========================================");
		
		if(result.isPresent()) {
			Memo memo = result.get();
			System.out.println(memo);
		}
	}
	
	
	@Test
	public void testupdate() {
		Memo memo = Memo.builder().mno(100L).memoText("Update Text").build();
		System.out.println(memoRepository.save(memo));
	}
	
	
	@Test
	public void testDelete() {
		Long mno = 4L;
		memoRepository.deleteById(mno);
	}
	
	@Test
	public void tsetPageDefault() {
		Pageable pageable = PageRequest.of(0,10);
		Page<Memo> result = memoRepository.findAll(pageable);
		System.out.println(result);
		System.out.println("-------------------------------------------");
		System.out.println("Total Pages: "+result.getTotalPages());
		System.out.println("Total Count: "+result.getTotalElements());
		System.out.println("Page Number: "+result.getNumber());
		System.out.println("Page Size: "+ result.getSize());
		System.out.println("has next page?: "+result.hasNext());
		System.out.println("first page?: "+ result.isFirst());
	
		for(Memo memo : result.getContent()) {
			System.out.println(memo);
		}
	}	
	*/
	
	@Test
	public void testSort() {
		Sort sort1 = Sort.by("mno").descending();
		
		Pageable pageable = PageRequest.of(0, 10, sort1);
		
		Page<Memo> result = memoRepository.findAll(pageable);
		
		result.get().forEach(memo ->{
			System.out.println(memo);
		});
	}
}
-----------------------------------------------------------

	@Test
	public void testSort() {
		Sort sort1 = Sort.by("mno").descending();
		Sort sort2 = Sort.by("memoText").ascending();
		Sort sortAll = sort1.and(sort2);
		Pageable pageable = PageRequest.of(0, 10, sortAll);
		
		Page<Memo> result = memoRepository.findAll(pageable);
		
		result.get().forEach(memo ->{
			System.out.println(memo);
		});
	}
---------------------------------------------------------------------


	@Test
	public void testQuerymethods() {
		List<Memo> list = memoRepository.findByMnoBetweenOrderByMnoDesc(70L, 80L);
		for(Memo memo : list) {
			System.out.println(memo);
		}
	}
	
	[MemoRepository]
	package com.example.test.repository;
import java.util.List;

import  org.springframework.data.jpa.repository.JpaRepository;
import com.example.test.entity.Memo;
public interface MemoRepository extends JpaRepository<Memo,Long>{
	//mno 역순으로 정렬
	List<Memo> findByMnoBetweenOrderByMnoDesc(Long from, Long to);
}

------------------------------------------------------------------------

	@Test
	public void testQueryMethodWithPageable() {
		Pageable pageable = PageRequest.of(0, 10,Sort.by("mno").descending());
		Page<Memo> result = memoRepository.findByMnoBetween(10L, 50L, pageable);
		result.get().forEach(memo -> System.out.println(memo));
	}
	[MemoRepository]
	package com.example.test.repository;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import  org.springframework.data.jpa.repository.JpaRepository;
import com.example.test.entity.Memo;
public interface MemoRepository extends JpaRepository<Memo,Long>{
	//mno 역순으로 정렬
	List<Memo> findByMnoBetweenOrderByMnoDesc(Long from, Long to);
	Page<Memo> findByMnoBetween(Long from, Long to, Pageable pageable);
}

