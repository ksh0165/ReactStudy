def network_request_async(number, on_done):
    def timer_done():
        on_done({"success": True, "result": number ** 2})
    timer = threading.Timer(1.0, timer_done)
    timer.start()

def on_done(result):
    print(result)
network_request_async(2, on_done)
network_request_async(3, on_done)
network_request_async(5, on_done)
print("after submission")



------------------------------------------

from concurrent.futures import Future
import threading
def network_request_async(number, on_done):
    def timer_done():
        on_done({"success": True, "result": number ** 2})
    timer = threading.Timer(1.0, timer_done)
    timer.start()

def on_done(result):
    print(result)
network_request_async(2, on_done)
network_request_async(3, on_done)
network_request_async(5, on_done)
print("after submission")

def network_async(number):
    future = Future()
    result = {"success":True, "result": number ** 2}
    timer = threading.Timer(1.0, lambda: future.set_result(result))
    timer.start()
    return future

def fetch_func(number):
    fut = network_async(number)
    def on_done_future(future):
        response = future.result()
        if response["success"]:
            print("Result is: {}".format(response["result"]))
    fut.add_done_callback(on_done_future)
    
    
    ---------------------------------------
    
    class Timer:
    def __init__(self, timeout):
        self.timeout = timeout
        self.start = time.time()
        
    def done(self):
        return time.time() - self.start > self.timeout

# timer = Timer(1.0)
# while True:
#     if timer.done():
#         print("Timer is done!")
#         break
        
    def on_timer_done(self, callback):
        self.callback = callback
timer = Timer(1.0)
timer.on_timer_done(lambda: print("Timer is done!"))

while True:
    if timer.done():
        timer.callback()
        break
        
---------------------------------------------------------------

class Timer:
    def __init__(self, timeout):
        self.timeout = timeout
        self.start = time.time()
        
    def done(self):
        return time.time() - self.start > self.timeout

# timer = Timer(1.0)
# while True:
#     if timer.done():
#         print("Timer is done!")
#         break
        
    def on_timer_done(self, callback):
        self.callback = callback
# timer = Timer(1.0)
# timer.on_timer_done(lambda: print("Timer is done!"))

# while True:
#     if timer.done():
#         timer.callback()
#         break

timers = []
timer1 = Timer(1.0)
timer1.on_timer_done(lambda: print("First timer is done!"))

timer2 = Timer(2.0)
timer2.on_timer_done(lambda: print("Second timer is done!"))

timers.append(timer1)
timers.append(timer2)

while True:
    for timer in timers:
        if timer.done():
            timer.callback()
            timers.remove(timer)
        if len(timers) == 0:
            break
