def network_request_async(number, on_done):
    def timer_done():
        on_done({"success": True, "result": number ** 2})
    timer = threading.Timer(1.0, timer_done)
    timer.start()

def on_done(result):
    print(result)
network_request_async(2, on_done)
network_request_async(3, on_done)
network_request_async(5, on_done)
print("after submission")



------------------------------------------

from concurrent.futures import Future
import threading
def network_request_async(number, on_done):
    def timer_done():
        on_done({"success": True, "result": number ** 2})
    timer = threading.Timer(1.0, timer_done)
    timer.start()

def on_done(result):
    print(result)
network_request_async(2, on_done)
network_request_async(3, on_done)
network_request_async(5, on_done)
print("after submission")

def network_async(number):
    future = Future()
    result = {"success":True, "result": number ** 2}
    timer = threading.Timer(1.0, lambda: future.set_result(result))
    timer.start()
    return future

def fetch_func(number):
    fut = network_async(number)
    def on_done_future(future):
        response = future.result()
        if response["success"]:
            print("Result is: {}".format(response["result"]))
    fut.add_done_callback(on_done_future)
